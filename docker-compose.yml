services:
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  reverse-proxy:
    image: traefik:v3.2
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      # Only expose services with an explicit label added to it
      - "--providers.docker.exposedbydefault=false"
      # HTTPS
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=cramblett42@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Redirect HTTP request (port 80) to HTTPS (port 443)
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      # All requests
      - "80:80"
      - "443:443"
      # Traefik web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      # So that Traefik can listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  nextjs:
    image: mcramblett/retrospeck:prod
    build:
      context: .
      dockerfile: Dockerfile.nextjs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.retro-speck-nextjs.rule=HostRegexp(`.*\\.?retrospeck\\.com`)"
      - "traefik.http.routers.retro-speck-nextjs.entrypoints=websecure"
      - "traefik.http.routers.retro-speck-nextjs.tls.certresolver=myresolver"
      # Enable Watchtower to monitor for updates:
      - "com.centurylinklabs.watchtower.enable=true"
    deploy:
      mode: replicated
      replicas: 3
    env_file:
      - ../env/retrospeck.env

volumes:
  node_modules:
  letsencrypt:
